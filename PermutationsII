Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution {

    public void permuteII(int[] nums, ArrayList<Integer> ds, 
            List<List<Integer>> ansList,HashMap<Integer,Integer> map){
        if(nums.length == ds.size()){
            ansList.add(new ArrayList<>(ds));
            return;
        }
        for(Map.Entry<Integer,Integer> m : map.entrySet()){
            int key = m.getKey();
            int value = m.getValue();
            if(value > 0){
                ds.add(key);
                map.put(m.getKey(),m.getValue()-1);
                permuteII(nums,ds,ansList,map);
                ds.remove(ds.size()-1);
                map.put(m.getKey(),m.getValue()+1);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {

        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }else{
                map.put(nums[i],1);
            }
        }
        for(Map.Entry<Integer,Integer> m : map.entrySet()){
            System.out.println(m.getKey()+" "+m.getValue());
        }
        ArrayList<Integer> ds = new ArrayList<Integer>();
        List<List<Integer>> ansList = new ArrayList<>();
        permuteII(nums,ds,ansList,map);
        return ansList;
        
    }
}
